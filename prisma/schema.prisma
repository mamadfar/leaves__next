generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Employee {
    employeeId    String   @id //* K012345 format - PK
    name          String
    managerId     String? //* Manager's employeeId - FK to Employee
    contractHours Int      @default(40) //* weekly
    isManager     Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    //* Relations
    manager            Employee?           @relation("ManagerEmployee", fields: [managerId], references: [employeeId])
    subordinates       Employee[]          @relation("ManagerEmployee")
    leaves             Leave[]
    approvedLeaves     Leave[]             @relation("ApproverLeaves")
    LeaveBalance       LeaveBalance?
    specialLeaveUsages SpecialLeaveUsage[]

    @@map("employees")
}

model Leave {
    leaveId          String            @id @default(uuid())
    leaveLabel       String //* e.g., "Annual Leave", "Sick Leave"
    employeeId       String //* FK to Employee
    startOfLeave     DateTime
    endOfLeave       DateTime
    approverId       String? //* FK to approver
    status           LeaveStatus       @default(REQUESTED)
    leaveType        LeaveType         @default(REGULAR) //* Regular or Special leave
    specialLeaveType SpecialLeaveType? //* Type of special leave if applicable
    totalHours       Float             @default(0) //* Total hours for this leave
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt

    //* Relations
    employee Employee  @relation(fields: [employeeId], references: [employeeId])
    approver Employee? @relation("ApproverLeaves", fields: [approverId], references: [employeeId])

    @@map("leaves")
}

model LeaveBalance {
    id         Int      @id @default(autoincrement())
    employeeId String   @unique //* FK to Employee
    year       Int
    totalDays  Int      @default(25) //* e.g., 25 days per year
    totalHours Int      @default(200) //* e.g., 200 hours per year - 25 days * 8 hours
    usedDays   Int      @default(0)
    usedHours  Int      @default(0)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    //* Relations
    employee Employee @relation(fields: [employeeId], references: [employeeId])

    @@unique([employeeId, year])
    @@map("leave_balances")
}

model SpecialLeaveUsage {
    id               Int              @id @default(autoincrement())
    employeeId       String //* FK to Employee
    year             Int
    specialLeaveType SpecialLeaveType
    usedDays         Int              @default(0)
    usedHours        Int              @default(0)
    maxDays          Int              @default(0) //* Maximum allowed for this type
    maxHours         Int              @default(0) //* Maximum allowed for this type
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt

    //* Relations
    employee Employee @relation(fields: [employeeId], references: [employeeId])

    @@unique([employeeId, year, specialLeaveType])
    @@map("special_leave_usage")
}

enum LeaveStatus {
    REQUESTED
    APPROVED
    REJECTED
    CANCELLED
    CLOSED
}

enum LeaveType {
    REGULAR
    SPECIAL
}

enum SpecialLeaveType {
    MOVING //? 1 day for moving to a new house (once per year)
    WEDDING //? 1 day for wedding or partner registration
    CHILD_BIRTH //? Birth of a child, max 5 days total
    PARENTAL_CARE //? Parental care, max 10x contract hours
}
